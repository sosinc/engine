(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{53:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return c})),n.d(t,"rightToc",(function(){return s})),n.d(t,"default",(function(){return d}));var r=n(2),a=n(6),o=(n(0),n(99)),i={id:"collections",title:"Collections",sidebar_label:"Collections"},c={unversionedId:"patterns/collections",id:"patterns/collections",isDocsHomePage:!1,title:"Collections",description:"Collections",source:"@site/docs/patterns/collections.md",permalink:"/engine/docs/patterns/collections",editUrl:"https://github.com/code11/engine/edit/master/docs/docs/patterns/collections.md",sidebar_label:"Collections",sidebar:"docs",previous:{title:"Aggregate",permalink:"/engine/docs/patterns/aggregate"},next:{title:"Flags",permalink:"/engine/docs/patterns/flags"}},s=[{value:"Collections",id:"collections",children:[]}],l={rightToc:s};function d(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(o.b)("wrapper",Object(r.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("h3",{id:"collections"},"Collections"),Object(o.b)("p",null,"Collections group similar data structures together and provide a friendly way of accesing and working with those data structures."),Object(o.b)("p",null,"Collections are very useful used in conjuction with entities."),Object(o.b)("p",null,"Entities are domain object that are uniquely defined by a unique identifier, and not by their attributes."),Object(o.b)("p",null,"[More description]"),Object(o.b)("p",null,"In the Engine data structure it's best to aim for balance between normalizing and denormalizing data based on the needs of observing changes or accesing partial or processed data."),Object(o.b)("p",null,"As a rule of thumb, data received from the outside of the system should be kept in a raw form somewhere so that it can be transformed in the many ways needed from your system."),Object(o.b)("p",null,"Also, very important is for the ",Object(o.b)("inlineCode",{parentName:"p"},"item")," to have its ",Object(o.b)("inlineCode",{parentName:"p"},"id")," stored on its data structure. Items should always be able to exist on their own if needed."),Object(o.b)("p",null,"In the following example there are many data processing patterns used:\n",Object(o.b)("inlineCode",{parentName:"p"},"articles.raw")," - stores denormalized data\n",Object(o.b)("inlineCode",{parentName:"p"},"articles.items")," - is made by a producer that makes a reduce over ",Object(o.b)("inlineCode",{parentName:"p"},"articles.raw")," and extracts only the information needed by the application & only the items needed for the application\n",Object(o.b)("inlineCode",{parentName:"p"},"articles.ids")," - is made by a producer that makes a reduce over ",Object(o.b)("inlineCode",{parentName:"p"},"articles.items")," and extracts only the list of ids - useful when you want to iterate on all articles but you don't want to get the data associated with the ids\n",Object(o.b)("inlineCode",{parentName:"p"},"articles.count")," - is made by a producer that makes a reduce over ",Object(o.b)("inlineCode",{parentName:"p"},"articles.ids")," and gives the no. of articles\n",Object(o.b)("inlineCode",{parentName:"p"},"articles.filters.category")," - is made by a producer that groups articles by their category - useful when you want to iterate on a single category - the existance of this producer is determined by the need of this information"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{}),"{\n  articles: {\n    raw: {\n      abc: {\n        [...]\n      },\n      dfg: {\n        [...]\n      },\n      xyz: {\n        [...]\n      },\n    },\n    items: {\n      abc: {\n        id: \"abc\",\n        title: 'Abc shorts',\n        category: 'shorts'\n      },\n      xyz: {\n        id: \"xyz\",\n        title: 'Xyz news',\n        category: 'news'\n      },\n    },\n    ids: ['xyz'],\n    count: 1,\n    filters: {\n      category: {\n        shorts: ['abc'],\n        news: ['xyz]\n      }\n    },\n  }\n}\n")))}d.isMDXComponent=!0},99:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return m}));var r=n(0),a=n.n(r);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=a.a.createContext({}),d=function(e){var t=a.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},p=function(e){var t=d(e.components);return a.a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},b=a.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),p=d(n),b=r,m=p["".concat(i,".").concat(b)]||p[b]||u[b]||o;return n?a.a.createElement(m,c(c({ref:t},l),{},{components:n})):a.a.createElement(m,c({ref:t},l))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=b;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:r,i[1]=c;for(var l=2;l<o;l++)i[l]=n[l];return a.a.createElement.apply(null,i)}return a.a.createElement.apply(null,n)}b.displayName="MDXCreateElement"}}]);