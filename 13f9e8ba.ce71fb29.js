(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{54:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return r})),n.d(t,"metadata",(function(){return s})),n.d(t,"rightToc",(function(){return c})),n.d(t,"default",(function(){return l}));var a=n(2),i=n(6),o=(n(0),n(89)),r={id:"state-is-king",title:"State is King!",sidebar_label:"State is King"},s={unversionedId:"quick-start-tutorial/state-is-king",id:"quick-start-tutorial/state-is-king",isDocsHomePage:!1,title:"State is King!",description:"State of the app when it has just started up (aka",source:"@site/docs/quick-start-tutorial/state-is-king.md",permalink:"/engine/docs/quick-start-tutorial/state-is-king",editUrl:"https://github.com/code11/engine/edit/master/docs/docs/quick-start-tutorial/state-is-king.md",sidebar_label:"State is King",sidebar:"docs",previous:{title:"Static UI",permalink:"/engine/docs/quick-start-tutorial/static-ui"},next:{title:"Accessing State in Components",permalink:"/engine/docs/quick-start-tutorial/accessing-state-in-components"}},c=[],p={rightToc:c};function l(e){var t=e.components,n=Object(i.a)(e,["components"]);return Object(o.b)("wrapper",Object(a.a)({},p,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/concepts/state"}),"State")," of the app when it has just started up (aka\ninitial state) can be given to ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/api/engine"}),"Engine")," when it is\ninstantiated:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-diff"}),'const engine = new Engine({\n+ state: {\n+   initial: { }\n+ },\n  view: {\n    element: <App />,\n    root: "#root"\n  }\n});\n')),Object(o.b)("p",null,"Usually there would be a unique ",Object(o.b)("inlineCode",{parentName:"p"},"id")," in the database which can uniquely identify\na todo. While building only the UI, such identifier isn't available. So the app\nwill add a fake ",Object(o.b)("inlineCode",{parentName:"p"},"id")," into every todo item it creates."),Object(o.b)("p",null,"Types are immensely helpful in modeling domain objects. Create a ",Object(o.b)("inlineCode",{parentName:"p"},"src/types.ts"),"\nfile, and add how the ",Object(o.b)("inlineCode",{parentName:"p"},"TodoItem")," is going to be shaped like:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),'export enum TodoStatuses {\n  pending = "pending",\n  done = "done"\n}\n\nexport interface TodoItem {\n  id: string;\n  title: string;\n  status: TodoStatuses;\n}\n')),Object(o.b)("p",null,"Notice that for the status of ",Object(o.b)("inlineCode",{parentName:"p"},"TodoItem"),"s, an enum of statuses is used instead\nof a boolean flag (e.g ",Object(o.b)("inlineCode",{parentName:"p"},"isDone")," or ",Object(o.b)("inlineCode",{parentName:"p"},"isPending"),"). It is an ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/best-practices#prefer-explicit-types-over-boolean-flags"}),"Engine best\npractice")," to\nprefer explicit types over boolean flags."),Object(o.b)("p",null,"Knowledge of the shape of ",Object(o.b)("inlineCode",{parentName:"p"},"TodoItem"),"s allows adding some initial todos the\napplication state. In ",Object(o.b)("inlineCode",{parentName:"p"},"src/index.tsx")),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-diff"}),"const engine = new Engine({\n  state: {\n-   initial: { }\n+   initial: {\n+     todosById: {\n+       todo1: { id: 'todo1', title: 'Add initial state to engine', isDone: false },\n+       todo2: { id: 'todo2', title: 'Use initial state in components', isDone: false }\n+     },\n+     visibleTodoIds: ['todo1', 'todo2']\n+   }\n+ },\n  view: {\n    element: <App />,\n    root: \"#root\"\n  }\n});\n")),Object(o.b)("p",null,"Todo items are kept in very explicitly named ",Object(o.b)("inlineCode",{parentName:"p"},"todosById")," key, and their ",Object(o.b)("inlineCode",{parentName:"p"},"id"),"s\nare also added in a ",Object(o.b)("inlineCode",{parentName:"p"},"visibleTodoIds")," array. This a deliberate choice with ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/concepts/state#shape-of-state"}),"good\nreasons"),". One of the app components (Todo listing)\nhappen to show a list of todo items. These shown todos might (and will) end up\nbeing different from our ",Object(o.b)("inlineCode",{parentName:"p"},"todosById"),". Keeping them in their own path in state\nallows keeping a normalized state. It is crucial for maintainability that a\nsingle source of truth for data is maintained."),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"todosById")," will often be referred to in the app. Create a type alias for it is\nhelpful to not have to repeat it over and over again. In ",Object(o.b)("inlineCode",{parentName:"p"},"src/types.ts"),", add:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"export type TodosById = { [id: string]: TodoItem };\n")),Object(o.b)("p",null,"It's time to show the ",Object(o.b)("inlineCode",{parentName:"p"},"TodoItem"),"s from state in our component."))}l.isMDXComponent=!0},89:function(e,t,n){"use strict";n.d(t,"a",(function(){return d})),n.d(t,"b",(function(){return m}));var a=n(0),i=n.n(a);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var p=i.a.createContext({}),l=function(e){var t=i.a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},d=function(e){var t=l(e.components);return i.a.createElement(p.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return i.a.createElement(i.a.Fragment,{},t)}},u=i.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,r=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),d=l(n),u=a,m=d["".concat(r,".").concat(u)]||d[u]||b[u]||o;return n?i.a.createElement(m,s(s({ref:t},p),{},{components:n})):i.a.createElement(m,s({ref:t},p))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,r=new Array(o);r[0]=u;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:a,r[1]=s;for(var p=2;p<o;p++)r[p]=n[p];return i.a.createElement.apply(null,r)}return i.a.createElement.apply(null,n)}u.displayName="MDXCreateElement"}}]);