(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{79:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return c})),n.d(t,"rightToc",(function(){return p})),n.d(t,"default",(function(){return d}));var r=n(2),a=n(6),o=(n(0),n(99)),i={id:"producer",title:"Producer",sidebar_label:"Producer"},c={unversionedId:"api/producer",id:"api/producer",isDocsHomePage:!1,title:"Producer",description:"`ts",source:"@site/docs/api/producer.md",permalink:"/engine/docs/api/producer",editUrl:"https://github.com/code11/engine/edit/master/docs/docs/api/producer.md",sidebar_label:"Producer",sidebar:"docs",previous:{title:"Engine",permalink:"/engine/docs/api/engine"},next:{title:"View",permalink:"/engine/docs/api/view"}},p=[{value:"Overview",id:"overview",children:[]},{value:"Running a producer",id:"running-a-producer",children:[]},{value:"Example",id:"example",children:[]},{value:"Parts",id:"parts",children:[{value:"Header",id:"header",children:[]},{value:"Guards",id:"guards",children:[]},{value:"Processing",id:"processing",children:[]}]},{value:"Best practices",id:"best-practices",children:[]}],s={rightToc:p};function d(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(o.b)("wrapper",Object(r.a)({},s,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-ts"}),'import { Producer } from "@c11/engine.macro"\n')),Object(o.b)("h2",{id:"overview"},"Overview"),Object(o.b)("p",null,"A ",Object(o.b)("inlineCode",{parentName:"p"},"Producer")," is simply a function that gets executed when something interesting\n(a trigger) changes in state."),Object(o.b)("p",null,"Any function can be turned into a producer by labeling it with ",Object(o.b)("inlineCode",{parentName:"p"},"producer"),". It\nallows using Engine features to interact with the state using\n",Object(o.b)("a",Object(r.a)({parentName:"p"},{href:"/docs/api/observe"}),"Observe"),", ",Object(o.b)("a",Object(r.a)({parentName:"p"},{href:"/docs/api/get"}),"Get"),", and\n",Object(o.b)("a",Object(r.a)({parentName:"p"},{href:"/docs/api/update"}),"Update"),". It is also possible to use ",Object(o.b)("a",Object(r.a)({parentName:"p"},{href:"/docs/api/prop"}),"Prop")," in\nproducers, even though it is not possible to pass a value directly to the\nproducer. producer receives same values as the ",Object(o.b)("a",Object(r.a)({parentName:"p"},{href:"/docs/api/view"}),"view")," it is\nadded to in ",Object(o.b)("inlineCode",{parentName:"p"},"Prop"),"s."),Object(o.b)("p",null,"The syntax is straight forward:"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-ts"}),"const producer: Producer = ({ /* header */ }) => { /* body */ }\n")),Object(o.b)("p",null,"The ",Object(o.b)("strong",{parentName:"p"},"header")," is a regular object that uses the Engine API to declare what data\nthe producer needs at runtime."),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{}),"{\n  bar = Observe.foo.bar,\n  baz = Get.foo.baz\n}\n")),Object(o.b)("p",null,"The ",Object(o.b)("strong",{parentName:"p"},"body")," part is left entirely to the developer. It's a normal function\nbody."),Object(o.b)("img",{src:"/static/img/producer.jpg",alt:"Producer"}),Object(o.b)("h2",{id:"running-a-producer"},"Running a producer"),Object(o.b)("p",null,"A ",Object(o.b)("inlineCode",{parentName:"p"},"producer")," can not be called directly. Engine considers a ",Object(o.b)("inlineCode",{parentName:"p"},"producer")," for\nexecution if it is added to a ",Object(o.b)("a",Object(r.a)({parentName:"p"},{href:"/docs/api/view"}),"view"),"'s ",Object(o.b)("inlineCode",{parentName:"p"},".producers")," array, or is\nadded to ",Object(o.b)("inlineCode",{parentName:"p"},"Engine"),"'s global producers list. e.g ",Object(o.b)("inlineCode",{parentName:"p"},"myProducer")," can added to a\n",Object(o.b)("inlineCode",{parentName:"p"},"Button")," view with:"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{}),"```tsx\nButton.producers = [myProducer];\n```\n")),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"producer"),"s are executed by Engine on following occasions:"),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},"Globally added ",Object(o.b)("inlineCode",{parentName:"li"},"producer"),"s are executed once when engine starts"),Object(o.b)("li",{parentName:"ol"},Object(o.b)("inlineCode",{parentName:"li"},"producer"),"s added to a ",Object(o.b)("a",Object(r.a)({parentName:"li"},{href:"/docs/api/view"}),"view"),"'s ",Object(o.b)("inlineCode",{parentName:"li"},"producers")," array are\nexecuted once every time the view is mounted"),Object(o.b)("li",{parentName:"ol"},"A ",Object(o.b)("inlineCode",{parentName:"li"},"producer")," is executed every time any of its ",Object(o.b)("inlineCode",{parentName:"li"},"Observe"),"d value (also\nreferred to as producer's trigger) is updated.")),Object(o.b)("h2",{id:"example"},"Example"),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"Observe"),", ",Object(o.b)("inlineCode",{parentName:"p"},"Get")," and ",Object(o.b)("inlineCode",{parentName:"p"},"Update"),' are used in the first object argument of a\nproducer function, which is referred to as the "header" of a function. In the\nheader, Engine operators can be used to interact with state. For example'),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-tsx"}),"const todoCounter: producer = ({\n  todosById: Observe.todosById,\n  updateCount = Update.count\n}) => (\n  const count = Object.keys(todosById).length;\n\n  updateCount.set(count);\n);\n")),Object(o.b)("h2",{id:"parts"},"Parts"),Object(o.b)("p",null,"Although a producer is just a function, at a conceptual level it can be broken\ninto parts with different/specific responsibilities:"),Object(o.b)("img",{src:"/static/img/producer-parts.png",alt:"Conceptual parts of a Producer"}),Object(o.b)("h3",{id:"header"},"Header"),Object(o.b)("p",null,"This is where you declare everything that the producer will need in the\nexecution part."),Object(o.b)("p",null,"It can take static data, variables, ",Object(o.b)("a",Object(r.a)({parentName:"p"},{href:"/docs/api/prop"}),"parent\nproperties"),", ",Object(o.b)("a",Object(r.a)({parentName:"p"},{href:"/docs/api/path"}),"path operations"),", ",Object(o.b)("a",Object(r.a)({parentName:"p"},{href:"/docs/api/arg"}),"argument\nreferences"),"."),Object(o.b)("p",null,"Full example:"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-ts"}),"const foo = 123\nconst producer: Producer = ({\n  varValue = foo,\n  staticValue = 'sample text',\n  propValue = Prop.value,\n  propValue2, // Same as Prop.propValue2\n  updateValue = Update.sample.path,\n  observeValue = Observe.sample.value,\n  getValue = Get.sample.otherValue,\n  refValue = Arg.propValue2\n}) => { ... }\n")),Object(o.b)("h3",{id:"guards"},"Guards"),Object(o.b)("p",null,"Producers will be triggered by the Engine regardless of whether the data they\ndepend on is valid or not. It is the producer's responsability to decide if the\ndata is suitable for its execution needs."),Object(o.b)("p",null,"Data from the triggers (i.e ",Object(o.b)("inlineCode",{parentName:"p"},"Observe")," operations) should be checked first, and\nthe producer should exit if its requirements aren't fulfilled."),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-ts"}),"const producer: Producer = ({\n  description = Observe.description,\n  summary = Update.summary\n}) => {\n  if (!description || !isString(description) ) {\n    return\n  }\n  summary.set(description.substr(0, 20))\n}\n")),Object(o.b)("p",null,"Guards can also be used to stop effects from happening (e.g. triggering another system):"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-ts"}),"import axios from 'axios'\nconst producer: Producer = ({\n  post = axios.post\n  trigger = Observe.submit,\n  getUrl = Get.url\n  getData = Get.data,\n  updateData = Update.data\n}) => {\n  if (!trigger) {\n    return\n  }\n\n  const data = getData();\n  const url = getUrl();\n\n  if (!isValid(data) || !url) {\n    return;\n  }\n\n  updateData.set(data);\n}\n")),Object(o.b)("h3",{id:"processing"},"Processing"),Object(o.b)("p",null,"Producers contain the logic of an Engine app. Any process (aka domain operation)\ncan (and should) be defined as one ore more producers acting on some data.\nProcessing data can be broadly categorized into two categories based on the kind\nof results they achieve."),Object(o.b)("h4",{id:"effects"},"Effects"),Object(o.b)("p",null,"Producers can call other systems, interact with the environment and produces\nchanges that are not visible in the state."),Object(o.b)("p",null,"For example making an XHR request to retrieve data, read the browser session\nstorage, interact with the DOM API or set timers."),Object(o.b)("h4",{id:"updates"},"Updates"),Object(o.b)("p",null,"Producers can update the current state of the Engine app. The state can only be\nchanged through the ",Object(o.b)("inlineCode",{parentName:"p"},"Update")," operation."),Object(o.b)("p",null,"This means, ",Object(o.b)("inlineCode",{parentName:"p"},"Producers")," will be pushing new data to the Engine which in turn\ntrigger other producers to execute and in turn update the state."),Object(o.b)("h2",{id:"best-practices"},"Best practices"),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"A ",Object(o.b)("inlineCode",{parentName:"p"},"producer")," should perform a single, very specific job. The more specific\nthe better. It is okay to have many small producers doing one thing each.")),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"All the dependencies of a Producers should be passed in the header.\nThe following is encouraged to increase the testability and reusability of the producer:"),Object(o.b)("pre",{parentName:"li"},Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-ts"}),"import axios from 'axios'\n\nconst producer: Producer = ({\n  get = axios.get,\n  data = Observe.data\n  ...\n}) => {\n  get({ ... })\n}\n")))))}d.isMDXComponent=!0},99:function(e,t,n){"use strict";n.d(t,"a",(function(){return b})),n.d(t,"b",(function(){return m}));var r=n(0),a=n.n(r);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=a.a.createContext({}),d=function(e){var t=a.a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},b=function(e){var t=d(e.components);return a.a.createElement(s.Provider,{value:t},e.children)},l={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},u=a.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,s=p(e,["components","mdxType","originalType","parentName"]),b=d(n),u=r,m=b["".concat(i,".").concat(u)]||b[u]||l[u]||o;return n?a.a.createElement(m,c(c({ref:t},s),{},{components:n})):a.a.createElement(m,c({ref:t},s))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=u;var c={};for(var p in t)hasOwnProperty.call(t,p)&&(c[p]=t[p]);c.originalType=e,c.mdxType="string"==typeof e?e:r,i[1]=c;for(var s=2;s<o;s++)i[s]=n[s];return a.a.createElement.apply(null,i)}return a.a.createElement.apply(null,n)}u.displayName="MDXCreateElement"}}]);