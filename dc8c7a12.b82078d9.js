(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{76:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return c})),n.d(t,"rightToc",(function(){return s})),n.d(t,"default",(function(){return u}));var o=n(2),r=n(6),a=(n(0),n(82)),i={id:"updating-state-from-components",title:"Updating State from Components",sidebar_label:"Updating State from Components"},c={unversionedId:"quick-start-tutorial/updating-state-from-components",id:"quick-start-tutorial/updating-state-from-components",isDocsHomePage:!1,title:"Updating State from Components",description:"Rendering our state in components is one piece of the puzzle, another piece is",source:"@site/docs/quick-start-tutorial/updating-state-from-components.md",permalink:"/engine/docs/quick-start-tutorial/updating-state-from-components",editUrl:"https://github.com/code11/engine/edit/master/docs/docs/quick-start-tutorial/updating-state-from-components.md",sidebar_label:"Updating State from Components",sidebar:"docs",previous:{title:"Accessing State in Components",permalink:"/engine/docs/quick-start-tutorial/accessing-state-in-components"},next:{title:"Introducing new paths in state",permalink:"/engine/docs/quick-start-tutorial/introducing-new-paths-in-state"}},s=[],p={rightToc:s};function u(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(a.b)("wrapper",Object(o.a)({},p,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("p",null,"Rendering our state in components is one piece of the puzzle, another piece is\nmanipulating state from components. Let's make it possible to toggle the status\nof our ",Object(a.b)("inlineCode",{parentName:"p"},"Todo"),"s."),Object(a.b)("p",null,"In src/Todo.tsx`,"),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-diff"}),'import React from "react";\n- import { view, Observe, Prop } from "@c11/engine.macro";\n+ import { view, Observe, Prop, Update } from "@c11/engine.macro";\n\n- const Todo: view = ({ title = Observe.todosById[Prop.id].title }) => (\n+ const Todo: view = ({\n+   title = Observe.todosById[Prop.id].title,\n+   updateStatus = Update.todosyById[Prop.id].status\n+ }) => (\n  <li>\n    <div className="view">\n-      <input className="toggle" type="checkbox" />\n+       <input\n+         className="toggle"\n+         type="checkbox"\n+         checked={status === TodoStatuses.done}\n+         onChange={() =>\n+           updateStatus.set(\n+             status === TodoStatuses.done\n+               ? TodoStatuses.pending\n+               : TodoStatuses.done\n+           )\n+         }\n+       />\n      <label>{title}</label>\n      <button className="destroy" />\n    </div>\n  </li>\n);\n\nexport default Todo;\n')),Object(a.b)("p",null,"We have:"),Object(a.b)("ol",null,Object(a.b)("li",{parentName:"ol"},"Used ",Object(a.b)("inlineCode",{parentName:"li"},"Observe.todosById<todoId>.status")," to use it for deciding whether the\ncheckbox for the ",Object(a.b)("inlineCode",{parentName:"li"},"Todo")," is checked or not"),Object(a.b)("li",{parentName:"ol"},"Used ",Object(a.b)("inlineCode",{parentName:"li"},"Update.todosById<todoId>.status")," to change status of our TodoItem.\n",Object(a.b)("a",Object(o.a)({parentName:"li"},{href:"/docs/api/update"}),"Update")," is the dual of ",Object(a.b)("a",Object(o.a)({parentName:"li"},{href:"/docs/api/observe"}),"Observe"),".\nObserve allow us to read any value from our global state, Update allow us to\nchange them. ",Object(a.b)("inlineCode",{parentName:"li"},"Update.<path>")," returns an object with a number of methods to\nconveniently work with our state. You can read ",Object(a.b)("a",Object(o.a)({parentName:"li"},{href:"/docs/api/update"}),"more about Update in api\ndocs"),".")))}u.isMDXComponent=!0},82:function(e,t,n){"use strict";n.d(t,"a",(function(){return d})),n.d(t,"b",(function(){return b}));var o=n(0),r=n.n(o);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=r.a.createContext({}),u=function(e){var t=r.a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},d=function(e){var t=u(e.components);return r.a.createElement(p.Provider,{value:t},e.children)},l={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},m=r.a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,i=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=u(n),m=o,b=d["".concat(i,".").concat(m)]||d[m]||l[m]||a;return n?r.a.createElement(b,c(c({ref:t},p),{},{components:n})):r.a.createElement(b,c({ref:t},p))}));function b(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=m;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:o,i[1]=c;for(var p=2;p<a;p++)i[p]=n[p];return r.a.createElement.apply(null,i)}return r.a.createElement.apply(null,n)}m.displayName="MDXCreateElement"}}]);