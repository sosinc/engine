(window.webpackJsonp=window.webpackJsonp||[]).push([[37],{100:function(e,t,n){"use strict";n.d(t,"a",(function(){return b})),n.d(t,"b",(function(){return u}));var o=n(0),a=n.n(o);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=a.a.createContext({}),l=function(e){var t=a.a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},b=function(e){var t=l(e.components);return a.a.createElement(p.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},m=a.a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,r=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),b=l(n),m=o,u=b["".concat(r,".").concat(m)]||b[m]||d[m]||i;return n?a.a.createElement(u,c(c({ref:t},p),{},{components:n})):a.a.createElement(u,c({ref:t},p))}));function u(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,r=new Array(i);r[0]=m;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:o,r[1]=c;for(var p=2;p<i;p++)r[p]=n[p];return a.a.createElement.apply(null,r)}return a.a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},93:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return r})),n.d(t,"metadata",(function(){return c})),n.d(t,"rightToc",(function(){return s})),n.d(t,"default",(function(){return l}));var o=n(2),a=n(6),i=(n(0),n(100)),r={id:"accessing-state-in-components",title:"Accessing State in Components",sidebar_label:"Accessing State"},c={unversionedId:"tutorials/react/accessing-state-in-components",id:"tutorials/react/accessing-state-in-components",isDocsHomePage:!1,title:"Accessing State in Components",description:"Converting a React Component to Engine view allow accessing",source:"@site/docs/tutorials/react/accessing-state-in-components.md",permalink:"/engine/docs/tutorials/react/accessing-state-in-components",editUrl:"https://github.com/code11/engine/edit/master/docs/docs/tutorials/react/accessing-state-in-components.md",sidebar_label:"Accessing State",sidebar:"docs",previous:{title:"State is King!",permalink:"/engine/docs/tutorials/react/state-is-king"},next:{title:"Updating State from Components",permalink:"/engine/docs/tutorials/react/updating-state-from-components"}},s=[],p={rightToc:s};function l(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(i.b)("wrapper",Object(o.a)({},p,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,"Converting a React Component to Engine ",Object(i.b)("a",Object(o.a)({parentName:"p"},{href:"/docs/api/view"}),"view")," allow accessing\ntodos from state In ",Object(i.b)("inlineCode",{parentName:"p"},"src/App.tsx"),":"),Object(i.b)("pre",null,Object(i.b)("code",Object(o.a)({parentName:"pre"},{className:"language-diff"}),'import React from "react";\n+ import { view, observe } from "@c11/engine.macro";\n+\n- const App = () => (\n+ const App: view = ({ todoIds = observe.visibleTodoIds }) => (\n  <section className="todoapp">\n+     {console.log("TODOS", todoIds)}\n')),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},Object(i.b)("inlineCode",{parentName:"li"},"App")," component is labeled as a ",Object(i.b)("inlineCode",{parentName:"li"},"view")),Object(i.b)("li",{parentName:"ol"},"In ",Object(i.b)("inlineCode",{parentName:"li"},"App"),"'s header, ",Object(i.b)("inlineCode",{parentName:"li"},"observe.visibileTodoIds")," allow reading ",Object(i.b)("inlineCode",{parentName:"li"},"State.visibileTodoIds"))),Object(i.b)("p",null,"Todos ids from state can be seen printed in console! Engine allow observing any\npart of the state by assigning it as ",Object(i.b)("inlineCode",{parentName:"p"},"observe.<path>")," in header of a `view."),Object(i.b)("p",null,"Extract the ",Object(i.b)("inlineCode",{parentName:"p"},"<Todo>")," component out of",Object(i.b)("inlineCode",{parentName:"p"},"<App>")," to easily ",Object(i.b)("inlineCode",{parentName:"p"},"map")," todo ids to",Object(i.b)("inlineCode",{parentName:"p"},"Todo"),"\ncomponents, and put it in its own file. In ",Object(i.b)("inlineCode",{parentName:"p"},"src/Todo.tsx"),", add"),Object(i.b)("pre",null,Object(i.b)("code",Object(o.a)({parentName:"pre"},{className:"language-tsx"}),'import React from "react";\n\nconst Todo = ({ id }) => (\n<li>\n  <div className="view">\n    <input className="toggle" type="checkbox" />\n    <label>{id}</label>\n    <button className="destroy" />\n  </div>\n</li>\n);\n\nexport default Todo;\n')),Object(i.b)("p",null,"Update the ",Object(i.b)("inlineCode",{parentName:"p"},"App")," component with:"),Object(i.b)("pre",null,Object(i.b)("code",Object(o.a)({parentName:"pre"},{className:"language-diff"}),'+ import Todo from \'./Todo\';\n...\n      <ul className="todo-list">\n-       <li>\n-         <div className="view">\n-           <input className="toggle" type="checkbox" />\n-           <label>Give life to my TODOs</label>\n-           <button className="destroy" />\n-         </div>\n-       </li>\n+       {todoIds.map((id: string) => (\n+         <Todo id={id} key={id} />\n+       ))}\n      </ul>\n')),Object(i.b)("p",null,"As per the implementation of",Object(i.b)("inlineCode",{parentName:"p"},"Todo"),", it is possible to see todo ids(i.e",Object(i.b)("inlineCode",{parentName:"p"},"todo1"),",\n",Object(i.b)("inlineCode",{parentName:"p"},"todo2"),") in browser. But it should actually show",Object(i.b)("inlineCode",{parentName:"p"},"TodoItem.title"),", not their\nid."),Object(i.b)("p",null,"This is where Engine differs from traditional React apps. Engine recommends that\n","[parent component should pass minimal data to its children]","(docs / best -\npractices#pass - minimal - data - to - children). Minimum amount of data needed\nto render a ",Object(i.b)("inlineCode",{parentName:"p"},"Todo")," is its ",Object(i.b)("inlineCode",{parentName:"p"},"id"),". Right todo can be retrieved from global state\nwith its id. Modify the ",Object(i.b)("inlineCode",{parentName:"p"},"Todo")," component to follow the Engine way:"),Object(i.b)("p",null,"In",Object(i.b)("inlineCode",{parentName:"p"},"src/Todo.tsx")),Object(i.b)("pre",null,Object(i.b)("code",Object(o.a)({parentName:"pre"},{className:"language-diff"}),'+ import { view, observe, prop } from "@c11/engine.macro";\n+\n- const Todo = ({ id }) => (\n+ const Todo: view = ({ title = observe.todosById[prop.id].title }) => (\n<li>\n  <div className="view">\n    <input className="toggle" type="checkbox" />\n-     <label>{id}</label>\n+     <label>{title}</label>\n    <button className="destroy" />\n  </div>\n</li>\n);\n')),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},Object(i.b)("inlineCode",{parentName:"li"},"Todo")," is converted to a",Object(i.b)("a",Object(o.a)({parentName:"li"},{href:"/docs/api/view"}),"view")," (by labeling it with ",Object(i.b)("inlineCode",{parentName:"li"},"view")," macro)"),Object(i.b)("li",{parentName:"ol"},"Assigning ",Object(i.b)("inlineCode",{parentName:"li"},"title")," to ",Object(i.b)("inlineCode",{parentName:"li"},"observe.todosById[prop.id].title")," in view header gives\naccess to the title of a todo from the global state")),Object(i.b)("p",null,Object(i.b)("a",Object(o.a)({parentName:"p"},{href:"/docs/api/prop"}),"prop")," allow ",Object(i.b)("a",Object(o.a)({parentName:"p"},{href:"/docs/concepts/path-composition"}),"composing\npaths")," for accessing data from global\nstate. ",Object(i.b)("inlineCode",{parentName:"p"},"prop.<path>")," gives access to all the ",Object(i.b)("a",Object(o.a)({parentName:"p"},{href:"https://reactjs.org/docs/components-and-props.html"}),"React\nprops")," passed to a component\nby its parent."),Object(i.b)("p",null,"Every ",Object(i.b)("inlineCode",{parentName:"p"},"view")," in Engine can access any data path from Engine's global state.\nTrick is getting the right thing. The input macros help achieving clever ways of\n",Object(i.b)("strong",{parentName:"p"},Object(i.b)("a",Object(o.a)({parentName:"strong"},{href:"/docs/concepts/path-composition"}),"path composition"))," to get the\nright data into views."),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"observe.todosById[prop.id].title")," tells Engine to look-up a todo with ",Object(i.b)("inlineCode",{parentName:"p"},"prop.id"),"\nin ",Object(i.b)("inlineCode",{parentName:"p"},"todosById")," object of the global state, and observe its ",Object(i.b)("inlineCode",{parentName:"p"},"title")," property. This\ngives read-only access to ",Object(i.b)("inlineCode",{parentName:"p"},"title"),"."),Object(i.b)("p",null,"This also ensures that the view gets re-rendered whenever ",Object(i.b)("inlineCode",{parentName:"p"},"title")," property of\ntodo with id ",Object(i.b)("inlineCode",{parentName:"p"},"prop.id")," changes. Any other changes that happen in the state, even\nin the todo itself will not affect the view."))}l.isMDXComponent=!0}}]);