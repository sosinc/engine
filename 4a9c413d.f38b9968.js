(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{63:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return c})),n.d(t,"rightToc",(function(){return s})),n.d(t,"default",(function(){return p}));var o=n(2),r=n(6),a=(n(0),n(82)),i={id:"introducing-new-paths-in-state",title:"Introducing new paths in state",sidebar_label:"Introducing new paths in state"},c={unversionedId:"quick-start-tutorial/introducing-new-paths-in-state",id:"quick-start-tutorial/introducing-new-paths-in-state",isDocsHomePage:!1,title:"Introducing new paths in state",description:"To make our Todos editable, we want to toggle the component that is used to",source:"@site/docs/quick-start-tutorial/introducing-new-paths-in-state.md",permalink:"/engine/docs/quick-start-tutorial/introducing-new-paths-in-state",editUrl:"https://github.com/code11/engine/edit/master/docs/docs/quick-start-tutorial/introducing-new-paths-in-state.md",sidebar_label:"Introducing new paths in state",sidebar:"docs",previous:{title:"Updating State from Components",permalink:"/engine/docs/quick-start-tutorial/updating-state-from-components"},next:{title:"Packages",permalink:"/engine/docs/packages"}},s=[],d={rightToc:s};function p(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(a.b)("wrapper",Object(o.a)({},d,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("p",null,"To make our ",Object(a.b)("inlineCode",{parentName:"p"},"Todo"),"s editable, we want to toggle the component that is used to\ndisplay our TodoItem. Instead of rendering ",Object(a.b)("inlineCode",{parentName:"p"},"title")," in a ",Object(a.b)("inlineCode",{parentName:"p"},"<label>"),", an ",Object(a.b)("inlineCode",{parentName:"p"},"<input>"),"\nwould serve our purpose of editing the title better. It's fair to say that our\n",Object(a.b)("inlineCode",{parentName:"p"},"Todo"),' can be one of two modes at a time: "viewing" or "editing".'),Object(a.b)("p",null,"In such scenarios, Engine recommends that we split our component into different\nStates. Let's go ahead and create two versions for our ",Object(a.b)("inlineCode",{parentName:"p"},"Todo")," component for the\ntwo states it can be in. For better separation of related code, we'll put\ndifferent states of ",Object(a.b)("inlineCode",{parentName:"p"},"Todo")," component in their own files."),Object(a.b)("p",null,"Rename ",Object(a.b)("inlineCode",{parentName:"p"},"src/Todo.tsx")," to ",Object(a.b)("inlineCode",{parentName:"p"},"src/Todo/index.tsx")),Object(a.b)("p",null,"This won't make a difference for other components which import ",Object(a.b)("inlineCode",{parentName:"p"},"Todo")," (i.e\n",Object(a.b)("inlineCode",{parentName:"p"},"App"),"). It'll give us a directory to keep ",Object(a.b)("inlineCode",{parentName:"p"},"Todo.View")," and ",Object(a.b)("inlineCode",{parentName:"p"},"Todo.Edit")," close\ntogether."),Object(a.b)("p",null,"Create ",Object(a.b)("inlineCode",{parentName:"p"},"src/Todo/View.tsx")," with following contents"),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-tsx"}),'import React from "react";\nimport { view, Observe, Prop, Update } from "@c11/engine.macro";\nimport { TodoStatuses } from "../types";\n\nconst View: view = ({\n  title = Observe.todosById[Prop.id].title,\n  status = Observe.todosById[Prop.id].status,\n  updateStatus = Update.todosById[Prop.id].status\n}) => (\n    <li>\n      <div className="view">\n        <input\n          className="toggle"\n          type="checkbox"\n          checked={status === TodoStatuses.done}\n          onChange={() =>\n            updateStatus.set(\n              status === TodoStatuses.done\n                ? TodoStatuses.pending\n                : TodoStatuses.done\n            )\n          }\n        />\n        <label>{title}</label>\n        <button className="destroy" />\n      </div>\n    </li>\n  );\n\nexport default View;\n')),Object(a.b)("p",null,"We have moved what was our ",Object(a.b)("inlineCode",{parentName:"p"},"Todo.tsx")," component, to ",Object(a.b)("inlineCode",{parentName:"p"},"Todo/View.tsx")),Object(a.b)("p",null,"For the editing mode of ",Object(a.b)("inlineCode",{parentName:"p"},"Todo"),", create ",Object(a.b)("inlineCode",{parentName:"p"},"src/Todo/Edit.tsx"),":"),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-tsx"}),'import React from "react";\nimport { view, Observe, Prop, Update } from "@c11/engine.macro";\n\nconst Edit: view = ({\n  title = Observe.todosById[Prop.id].title,\n  updateTodo = Update.todosById[Prop.id]\n}) => (\n    <li className="editing">\n      <input\n        className="edit"\n        value={title}\n        onChange={e => updateTodo.merge({ title: e.currentTarget.value })}\n      />\n    </li>\n  );\n\nexport default Edit;\n')),Object(a.b)("p",null,"Now our ",Object(a.b)("inlineCode",{parentName:"p"},"src/Todo/index.tsx")," can simply be a logical component, which decides which\nof its two modes to render. In ",Object(a.b)("inlineCode",{parentName:"p"},"src/Todo/index.tsx")),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-tsx"}),'import React from "react";\nimport { view, Observe, Prop } from "@c11/engine.macro";\nimport View from "./View";\nimport Edit from "./Edit";\nimport { TodoModes } from "../types";\n\nconst Todo: view = ({ id, mode = Observe.todosById[Prop.id].mode }) => {\n const Component = mode === TodoModes.editing ? Edit : View;\n\n return <Component id={id} />;\n};\n\nexport default Todo;\n')))}p.isMDXComponent=!0},82:function(e,t,n){"use strict";n.d(t,"a",(function(){return l})),n.d(t,"b",(function(){return m}));var o=n(0),r=n.n(o);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var d=r.a.createContext({}),p=function(e){var t=r.a.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},l=function(e){var t=p(e.components);return r.a.createElement(d.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},b=r.a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,i=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),l=p(n),b=o,m=l["".concat(i,".").concat(b)]||l[b]||u[b]||a;return n?r.a.createElement(m,c(c({ref:t},d),{},{components:n})):r.a.createElement(m,c({ref:t},d))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=b;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:o,i[1]=c;for(var d=2;d<a;d++)i[d]=n[d];return r.a.createElement.apply(null,i)}return r.a.createElement.apply(null,n)}b.displayName="MDXCreateElement"}}]);